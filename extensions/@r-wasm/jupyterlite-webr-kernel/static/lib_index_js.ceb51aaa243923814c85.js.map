{"version":3,"file":"lib_index_js.ceb51aaa243923814c85.js","mappings":";;;;;;;;;;;;;;;;;;AAAmD;AACR;AACkC;AACA;AAC7E;AACA;AACA;AACA,eAAe,6DAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,gCAAgC;AAChC,iBAAiB;AACjB;AACA,kCAAkC,yFAAM;AACxC,kCAAkC,yFAAM;AACxC,iBAAiB;AACjB,aAAa;AACb;AACA,2BAA2B,oDAAU,GAAG,YAAY;AACpD,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;;ACnCvB,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAI,IAAI,SAAI;AAC1C;AACA;AACA;AACA;AACA;AAC2C;AACT;AACD;AACM;AACvC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,2CAA2C,qDAAM;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kCAAkC;AAClD;AACA;AACA;AACA;AACA,kEAAkE,iDAAO;AACzE;AACA;AACA,wDAAwD,yBAAyB;AACjF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,oBAAoB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mHAAmH,qBAAqB;AACxI;AACA;AACA;AACA;AACA;AACA,0DAA0D,uCAAuC;AACjG;AACA;AACA,0DAA0D,uCAAuC;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,aAAa;AACb;AACA;AACA;AACA,8CAA8C,iDAAiD;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,6BAA6B,+CAAM;AACnC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iCAAiC,aAAa,OAAO,aAAa;AAClE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,wBAAwB;AACxB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrUA,iEAAe,qBAAuB,yEAAyE;;;;;;;;;;;;;;ACA/G,iEAAe,qBAAuB,yEAAyE;;;;;;;;;;;;;;ACA/G;AACA,iEAAe;AACf;AACA,CAAC;;;;;;;;;;;;;;ACHD,iEAAe,cAAc,EAAE,UAAU,EAAE,eAAe,EAAE,gBAAgB,EAAE,UAAU,GAAG,yCAAyC;;;;;;;;;;;;;;ACApI;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;ACjBqC;AACrC;AACA;AACA;AACA;;AAEA;;AAEA,gBAAgB,SAAS;AACzB;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;;AAEA,OAAO,wDAAQ;AACf;AACA;;AAEA;AACA;;AAEA,iEAAe,SAAS;;;;;;;;;;;;;;;;;AChCS;AACN;AACsB;;AAEjD;AACA,MAAM,6DAAiB;AACvB,WAAW,6DAAiB;AAC5B;;AAEA;AACA,iDAAiD,+CAAG,KAAK;;AAEzD;AACA,mCAAmC;;AAEnC;AACA;;AAEA,oBAAoB,QAAQ;AAC5B;AACA;;AAEA;AACA;;AAEA,SAAS,8DAAe;AACxB;;AAEA,iEAAe,EAAE;;;;;;;;;;;;;;;AC5Bc;;AAE/B;AACA,qCAAqC,sDAAU;AAC/C;;AAEA,iEAAe,QAAQ","sources":["webpack://@r-wasm/jupyterlite-webr-kernel/./lib/index.js","webpack://@r-wasm/jupyterlite-webr-kernel/./lib/webr_kernel.js","webpack://@r-wasm/jupyterlite-webr-kernel/./style/logos/r-logo-32x32.png","webpack://@r-wasm/jupyterlite-webr-kernel/./style/logos/r-logo-64x64.png","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/uuid/dist/esm-browser/native.js","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/uuid/dist/esm-browser/regex.js","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/uuid/dist/esm-browser/rng.js","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/uuid/dist/esm-browser/stringify.js","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/uuid/dist/esm-browser/v4.js","webpack://@r-wasm/jupyterlite-webr-kernel/./node_modules/uuid/dist/esm-browser/validate.js"],"sourcesContent":["import { IKernelSpecs } from '@jupyterlite/kernel';\nimport { WebRKernel } from './webr_kernel';\nimport logo32 from '!!file-loader?context=.!../style/logos/r-logo-32x32.png';\nimport logo64 from '!!file-loader?context=.!../style/logos/r-logo-64x64.png';\nconst server_kernel = {\n    id: '@jupyterlite/webr-kernel-extension:kernel',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        kernelspecs.register({\n            spec: {\n                name: 'webR',\n                display_name: 'R (webR)',\n                language: 'R',\n                argv: [],\n                spec: {\n                    argv: [],\n                    env: {},\n                    display_name: 'R (webR)',\n                    language: 'R',\n                    interrupt_mode: 'message',\n                    metadata: {},\n                },\n                resources: {\n                    'logo-32x32': logo32,\n                    'logo-64x64': logo64,\n                },\n            },\n            create: async (options) => {\n                return new WebRKernel({ ...options });\n            },\n        });\n    },\n};\nconst plugins = [server_kernel];\nexport default plugins;\n","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _WebRKernel_id, _WebRKernel_name, _WebRKernel_location, _WebRKernel_isDisposed, _WebRKernel_disposed, _WebRKernel_sendMessage, _WebRKernel_parentHeader, _WebRKernel_executionCounter, _WebRKernel_webRConsole, _WebRKernel_init, _WebRKernel_envSetup, _WebRKernel_shelter, _WebRKernel_lastPlotHash;\nimport { Signal } from '@lumino/signaling';\nimport { v4 as uuid } from 'uuid';\nimport { sha256 } from 'hash.js';\nimport { Console } from '@r-wasm/webr';\nconst webRVersion = '0.1.0';\nconst baseRVersion = '3.1.4';\nconst protolcolVersion = '5.2';\nexport class WebRKernel {\n    constructor(options) {\n        _WebRKernel_id.set(this, void 0);\n        _WebRKernel_name.set(this, void 0);\n        _WebRKernel_location.set(this, void 0);\n        _WebRKernel_isDisposed.set(this, false);\n        _WebRKernel_disposed.set(this, new Signal(this));\n        _WebRKernel_sendMessage.set(this, void 0);\n        _WebRKernel_parentHeader.set(this, undefined);\n        _WebRKernel_executionCounter.set(this, 0);\n        _WebRKernel_webRConsole.set(this, void 0);\n        _WebRKernel_init.set(this, void 0);\n        _WebRKernel_envSetup.set(this, void 0);\n        _WebRKernel_shelter.set(this, void 0);\n        _WebRKernel_lastPlotHash.set(this, undefined);\n        const { id, name, sendMessage, location } = options;\n        __classPrivateFieldSet(this, _WebRKernel_id, id, \"f\");\n        __classPrivateFieldSet(this, _WebRKernel_name, name, \"f\");\n        __classPrivateFieldSet(this, _WebRKernel_location, location, \"f\");\n        __classPrivateFieldSet(this, _WebRKernel_sendMessage, sendMessage, \"f\");\n        __classPrivateFieldSet(this, _WebRKernel_webRConsole, new Console({\n            stdout: (line) => console.log(line),\n            stderr: (line) => console.error(line),\n            prompt: (prompt) => this.sendStdinRequest({ prompt, password: false }),\n        }), \"f\");\n        this.sendKernelStatus('starting');\n        __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").run();\n        __classPrivateFieldSet(this, _WebRKernel_init, __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.init(), \"f\");\n        __classPrivateFieldSet(this, _WebRKernel_envSetup, this.setupEnvironment(), \"f\");\n    }\n    get id() {\n        return __classPrivateFieldGet(this, _WebRKernel_id, \"f\");\n    }\n    get name() {\n        return __classPrivateFieldGet(this, _WebRKernel_name, \"f\");\n    }\n    get location() {\n        return __classPrivateFieldGet(this, _WebRKernel_location, \"f\");\n    }\n    get ready() {\n        return __classPrivateFieldGet(this, _WebRKernel_init, \"f\");\n    }\n    get isDisposed() {\n        return __classPrivateFieldGet(this, _WebRKernel_isDisposed, \"f\");\n    }\n    get disposed() {\n        return __classPrivateFieldGet(this, _WebRKernel_disposed, \"f\");\n    }\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        __classPrivateFieldSet(this, _WebRKernel_isDisposed, true, \"f\");\n        __classPrivateFieldGet(this, _WebRKernel_disposed, \"f\").emit(void 0);\n    }\n    async setupEnvironment() {\n        await this.ready;\n        __classPrivateFieldSet(this, _WebRKernel_shelter, await new (__classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.Shelter)(), \"f\");\n        await __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.installPackages(['svglite']);\n        await __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.evalRVoid('library(svglite)');\n        // Enable dev.control to allow active plots to be copied\n        await __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.evalRVoid(`\n      options(device = function(...){\n        pdf(...)\n        dev.control(\"enable\")\n      }, webr.plot.new = FALSE)\n    `);\n        // Create a signal when there is a new plot to be shown in JupyterLite\n        await __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.evalRVoid(`\n      setHook(\"grid.newpage\", function() {\n        options(webr.plot.new = TRUE)\n      }, \"replace\")\n    `);\n        // Default plot size\n        await __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.evalRVoid(`\n      options(webr.plot.width = 7, webr.plot.height = 5.25)\n    `);\n    }\n    async handleMessage(msg) {\n        switch (msg.header.msg_type) {\n            case 'execute_request': {\n                __classPrivateFieldSet(this, _WebRKernel_parentHeader, msg.header, \"f\");\n                await this.handleExecRequest(msg);\n                break;\n            }\n            case 'input_reply': {\n                const stdin = msg.content;\n                if (stdin.status === 'ok') {\n                    __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").stdin(stdin.value);\n                }\n                break;\n            }\n            case 'kernel_info_request': {\n                __classPrivateFieldSet(this, _WebRKernel_parentHeader, msg.header, \"f\");\n                this.sendKernelInfoReply(msg);\n                await this.ready;\n                this.sendKernelStatus('idle');\n                break;\n            }\n            default:\n                console.warn(`Unhandled message type: ${msg.header.msg_type}`);\n        }\n    }\n    async handleExecRequest(msg) {\n        const req = msg;\n        this.sendKernelStatus('busy');\n        if (req.content.store_history) {\n            __classPrivateFieldSet(this, _WebRKernel_executionCounter, __classPrivateFieldGet(this, _WebRKernel_executionCounter, \"f\") + 1, \"f\");\n        }\n        await __classPrivateFieldGet(this, _WebRKernel_envSetup, \"f\");\n        try {\n            const exec = await __classPrivateFieldGet(this, _WebRKernel_shelter, \"f\").captureR(req.content.code, { withAutoprint: true });\n            const output = exec.output;\n            // Deal with showing stream and condition outputs\n            output.forEach(async (out) => {\n                switch (out.type) {\n                    case 'stdout':\n                        this.sendIOReply(msg, 'stream', { name: 'stdout', text: out.data + '\\n' });\n                        break;\n                    case 'stderr':\n                        this.sendIOReply(msg, 'stream', { name: 'stderr', text: out.data + '\\n' });\n                        break;\n                    case 'message': {\n                        const cnd = out.data;\n                        const message = (await cnd.get('message'));\n                        this.sendIOReply(msg, 'stream', {\n                            name: 'stderr',\n                            text: (await message.toString()) + '\\n',\n                        });\n                        break;\n                    }\n                    case 'warning': {\n                        const cnd = out.data;\n                        const message = (await cnd.get('message'));\n                        this.sendIOReply(msg, 'stream', {\n                            name: 'stderr',\n                            text: 'Warning message:\\n' + (await message.toString()) + '\\n',\n                        });\n                        break;\n                    }\n                }\n            });\n            // Send an R plot if there are changes to the graphics device\n            await this.sendPlotOutput(msg);\n            // Send success signal\n            this.sendShellReply(msg, 'execute_reply', {\n                status: 'ok',\n                execution_count: __classPrivateFieldGet(this, _WebRKernel_executionCounter, \"f\"),\n                user_expressions: {},\n            });\n        }\n        catch (e) {\n            const evalue = e.message;\n            this.sendIOReply(msg, 'stream', { name: 'stderr', text: 'Error: ' + evalue + '\\n' });\n            this.sendShellReply(msg, 'execute_reply', {\n                status: 'error',\n                execution_count: __classPrivateFieldGet(this, _WebRKernel_executionCounter, \"f\"),\n                ename: 'error',\n                evalue: evalue,\n                traceback: [],\n            });\n        }\n        finally {\n            await __classPrivateFieldGet(this, _WebRKernel_shelter, \"f\").purge();\n        }\n        this.sendKernelStatus('idle');\n    }\n    async sendPlotOutput(msg) {\n        const dev = await __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.evalRNumber('dev.cur()');\n        const newPlot = await __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.evalRBoolean('options(\"webr.plot.new\")[[1]]');\n        if (dev > 1) {\n            await __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.evalRVoid(`\n        try({\n          dev.copy(function(...) {\n            w <- options(\"webr.plot.width\")[[1]]\n            h <- options(\"webr.plot.height\")[[1]]\n            svglite(width = w, height = h, ...)\n          }, \"/tmp/_webRplots.svg\")\n          dev.off()\n        }, silent=TRUE)\n      `);\n            const plotData = await __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.FS.readFile('/tmp/_webRplots.svg');\n            // Send plot data to client if a new.plot() has been triggered or if\n            // the plot has changed since last time\n            const plotHash = sha256().update(plotData).digest('hex');\n            if (newPlot || !__classPrivateFieldGet(this, _WebRKernel_lastPlotHash, \"f\") || plotHash !== __classPrivateFieldGet(this, _WebRKernel_lastPlotHash, \"f\")) {\n                __classPrivateFieldSet(this, _WebRKernel_lastPlotHash, plotHash, \"f\");\n                this.sendIOReply(msg, 'display_data', {\n                    data: {\n                        'image/svg+xml': new TextDecoder().decode(plotData),\n                    },\n                    metadata: {\n                        'image/svg+xml': {\n                            isolated: true,\n                        },\n                    },\n                });\n                await __classPrivateFieldGet(this, _WebRKernel_webRConsole, \"f\").webR.evalRVoid('options(webr.plot.new = FALSE)');\n            }\n        }\n    }\n    sendStdinRequest(content) {\n        const reply = {\n            header: {\n                msg_id: uuid(),\n                username: __classPrivateFieldGet(this, _WebRKernel_parentHeader, \"f\") ? __classPrivateFieldGet(this, _WebRKernel_parentHeader, \"f\").username : '',\n                session: __classPrivateFieldGet(this, _WebRKernel_parentHeader, \"f\") ? __classPrivateFieldGet(this, _WebRKernel_parentHeader, \"f\").session : '',\n                date: new Date().toISOString(),\n                msg_type: 'input_request',\n                version: protolcolVersion,\n            },\n            parent_header: __classPrivateFieldGet(this, _WebRKernel_parentHeader, \"f\"),\n            metadata: {},\n            content,\n            buffers: [],\n            channel: 'stdin',\n        };\n        __classPrivateFieldGet(this, _WebRKernel_sendMessage, \"f\").call(this, reply);\n    }\n    sendIOReply(msg, type, content) {\n        const reply = {\n            header: {\n                msg_id: uuid(),\n                username: msg.header.username,\n                session: msg.header.session,\n                date: new Date().toISOString(),\n                msg_type: type,\n                version: protolcolVersion,\n            },\n            parent_header: msg.header,\n            metadata: {},\n            content,\n            buffers: [],\n            channel: 'iopub',\n        };\n        __classPrivateFieldGet(this, _WebRKernel_sendMessage, \"f\").call(this, reply);\n    }\n    sendShellReply(msg, type, content) {\n        const reply = {\n            header: {\n                msg_id: uuid(),\n                username: msg.header.username,\n                session: msg.header.session,\n                date: new Date().toISOString(),\n                msg_type: type,\n                version: protolcolVersion,\n            },\n            parent_header: msg.header,\n            metadata: {},\n            content,\n            buffers: [],\n            channel: 'shell',\n        };\n        __classPrivateFieldGet(this, _WebRKernel_sendMessage, \"f\").call(this, reply);\n    }\n    sendKernelInfoReply(msg) {\n        const reply = {\n            header: {\n                msg_id: uuid(),\n                username: msg.header.username,\n                session: msg.header.session,\n                date: new Date().toISOString(),\n                msg_type: 'kernel_info_reply',\n                version: protolcolVersion,\n            },\n            parent_header: msg.header,\n            metadata: {},\n            content: {\n                status: 'ok',\n                protocol_version: protolcolVersion,\n                implementation: 'webr',\n                implementation_version: webRVersion,\n                language_info: {\n                    name: 'R',\n                    version: baseRVersion,\n                    mimetype: 'text/x-rsrc',\n                    file_extension: '.R',\n                },\n                banner: `webR v${webRVersion} - R v${baseRVersion}`,\n                help_links: [],\n            },\n            buffers: [],\n            channel: 'shell',\n        };\n        __classPrivateFieldGet(this, _WebRKernel_sendMessage, \"f\").call(this, reply);\n    }\n    sendKernelStatus(status) {\n        const msg = {\n            channel: 'iopub',\n            header: {\n                msg_id: uuid(),\n                username: __classPrivateFieldGet(this, _WebRKernel_parentHeader, \"f\") ? __classPrivateFieldGet(this, _WebRKernel_parentHeader, \"f\").username : '',\n                session: __classPrivateFieldGet(this, _WebRKernel_parentHeader, \"f\") ? __classPrivateFieldGet(this, _WebRKernel_parentHeader, \"f\").session : '',\n                date: new Date().toISOString(),\n                msg_type: 'status',\n                version: protolcolVersion,\n            },\n            content: {\n                execution_state: status,\n            },\n            metadata: {},\n            parent_header: {},\n        };\n        __classPrivateFieldGet(this, _WebRKernel_sendMessage, \"f\").call(this, msg);\n    }\n}\n_WebRKernel_id = new WeakMap(), _WebRKernel_name = new WeakMap(), _WebRKernel_location = new WeakMap(), _WebRKernel_isDisposed = new WeakMap(), _WebRKernel_disposed = new WeakMap(), _WebRKernel_sendMessage = new WeakMap(), _WebRKernel_parentHeader = new WeakMap(), _WebRKernel_executionCounter = new WeakMap(), _WebRKernel_webRConsole = new WeakMap(), _WebRKernel_init = new WeakMap(), _WebRKernel_envSetup = new WeakMap(), _WebRKernel_shelter = new WeakMap(), _WebRKernel_lastPlotHash = new WeakMap();\n","export default __webpack_public_path__ + \"673490063efb564025c18d94159423829e3ce1ffcf8dd0169a6e87e69b3df37e.png\";","export default __webpack_public_path__ + \"a09500d3b231a4ffaa14f44f3afda2d607a69d4a70f8c48db760191b4765c97a.png\";","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;"],"names":[],"sourceRoot":""}